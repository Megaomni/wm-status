import { app, BrowserWindow } from 'electron';
import { Client } from 'wwebjs-electron';
import pie from "puppeteer-in-electron";
import puppeteer from "puppeteer-core";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

pie.initialize(app)
  .then(() => {
    const createMainWindow = (): BrowserWindow => {
      // Create the browser window.
      const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
          preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
      });

      // and load the index.html of the app.
      mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

      // Open the DevTools.
      mainWindow.webContents.openDevTools();
      return mainWindow
    };
    const createWWebWindow = async (mainWindow: BrowserWindow): Promise<void> => {
      const window = new BrowserWindow({
        show: false
      })
      window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
      mainWindow.on('close', () => {
        window.close()
      })
      const browser = await pie.connect(app, puppeteer as any);
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      const client = new Client(browser, window);
      client.on('qr', (qr: string) => {
        mainWindow.webContents.send('qrcode', qr)
      });

      client.on('ready', () => {
        console.log('Client is ready!');
      });

      await client.initialize();
    }

    const main = async () => {
      const mainWindow = createMainWindow()
      await createWWebWindow(mainWindow)
    }
    app.on('ready', main);

    app.on('window-all-closed', () => {
      if (process.platform !== 'darwin') {
        app.quit();
      }
    });

    app.on('activate', async () => {
      // On OS X it's common to re-create a window in the app when the
      // dock icon is clicked and there are no other windows open.
      if (BrowserWindow.getAllWindows().length === 0) {
        await main();
      }
    });
  })
  .catch(err => console.error(err))
