import { app, BrowserWindow, dialog, globalShortcut, Menu, nativeImage, Notification, Tray } from 'electron';
import { Client } from 'wwebjs-electron';
import pie from "puppeteer-in-electron";
import isDev from 'electron-is-dev'
import { decodeMessage } from './utils/decodeMessage';
import puppeteer, { Browser } from 'puppeteer-core';
import { resolve } from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let whatsappClient: Client
const appIconPath = nativeImage.createFromPath(resolve(__dirname, 'app_icon.png')).resize({ width: 16, height: 16 })
const closeIconPath = nativeImage.createFromPath(resolve(__dirname, 'close_icon.png')).resize({ width: 16, height: 16 })

pie.initialize(app)
  .then(() => {
    const createMainWindow = async (): Promise<BrowserWindow> => {
      // Create the browser window.
      const mainWindow = new BrowserWindow({
        height: 512,
        width: 512,
        webPreferences: {
          preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
          nodeIntegration: true
        },
      });

      // and load the index.html of the app.
      mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
      return mainWindow
    };
    const createWWebWindow = async (): Promise<{ browser: Browser, window: BrowserWindow }> => {
      const window = new BrowserWindow({
        show: false
      })
      window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      const browser = await pie.connect(app, puppeteer);
      return { browser, window }
    }

    const main = async () => {
      let mainWindow: BrowserWindow
      let wwebWindow: BrowserWindow
      let needRefresh = true

      const gotTheLock = app.requestSingleInstanceLock()

      if (!gotTheLock) {
        app.quit()
      } else {
        try {
          mainWindow = await createMainWindow()

          mainWindow.once('ready-to-show', async () => {
            console.log('MAIN WINDOW READY');
            const { browser, window } = await createWWebWindow()
            wwebWindow = window

            if (process.platform === 'win32') {
              const tray = new Tray(appIconPath)
              tray.on('click', () => {
                mainWindow.show()
              })
              const contextMenu = Menu.buildFromTemplate([
                {
                  label: 'Sair', icon: closeIconPath, click: () => {
                    mainWindow.removeAllListeners()
                    app.quit()
                  }
                }
              ])
              tray.setToolTip('WM Status App')
              const ballon = {
                title: 'Segundo Plano',
                content: 'Rodando em segundo plano',
                icon: appIconPath
              }
              tray.setContextMenu(contextMenu)
              mainWindow.on('close', (e) => {
                e.preventDefault()
                mainWindow.hide()
              })
              mainWindow.on('minimize', (e: Electron.Event) => {
                e.preventDefault()
                mainWindow.hide()
              })
              mainWindow.once('hide', () => {
                tray.displayBalloon(ballon)
              })
            } else {
              mainWindow.on('close', () => {
                wwebWindow.close()
              })
            }

            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            whatsappClient = new Client(browser, wwebWindow);

            whatsappClient.on('qr', (qr: string) => {
              needRefresh = false
              mainWindow.webContents.send('onqrcode', qr)
            });

            whatsappClient.on('ready', () => {
              needRefresh = false
              console.log('Client is ready!');
              if (!mainWindow.isFocused()) {
                new Notification({
                  title: 'WM Status',
                  body: 'WhatsApp conectado!'
                }).show()
              }
              mainWindow.webContents.send('onconnected', true)

            });

            whatsappClient.on('disconnected', () => {
              console.log('Client is disconnected!');
              new Notification({
                title: 'WM Status',
                body: 'WhatsApp desconectado!'
              }).show()
              mainWindow.webContents.send('ondisconnected', true)
            });

            whatsappClient.on('loading_screen', (percent, message) => {
              needRefresh = false
              console.log(percent, message);
              mainWindow.webContents.send('onloading', { percent, message })
            })

            whatsappClient.on('auth_failure', (message) => {
              mainWindow.webContents.send('error', message)
            })

            let counter = 15
            const interval = setInterval(() => {
              if (needRefresh) {
                wwebWindow.webContents.reloadIgnoringCache()
                counter += 5
              } else {
                clearInterval(interval)
              }
            }, counter * 1000);

            try {
              await whatsappClient.initialize();
            } catch (error) {
              console.error('AQUI ===>', error);
            }
          })
        } catch (error) {
          mainWindow.webContents.send('error', error)
          console.error(error);
          throw error
        }

        globalShortcut.register('F12', () => {
          mainWindow.webContents.toggleDevTools()
        })

        if (isDev && process.platform === 'win32') {
          // Set the path of electron.exe and your app.
          // These two additional parameters are only available on windows.
          // Setting this is required to get this working in dev mode.
          app.setAsDefaultProtocolClient('wmstatus-dev', process.execPath, [resolve(process.argv[1]), '']);
        } else {

          app.on('second-instance', async (event, commandLine) => {
            // Someone tried to run a second instance, we should focus our window.
            const { contact, message } = decodeMessage(commandLine[commandLine.length - 1])

            if (mainWindow) {

              if (mainWindow.isMinimized()) mainWindow.restore()
              try {
                await whatsappClient.sendMessage(`${contact}@c.us`, message)
              } catch (error) {
                dialog.showErrorBox('Deu Ruim!', error)
              }
            }
            // the commandLine is array of strings in which last element is deep link url
            // the url str ends with /
          })

          if (process.platform === 'darwin') {
            app.on('open-url', function (event, url) {
              const { contact, message } = decodeMessage(url)
              console.log(contact, message);
              whatsappClient.sendMessage(`${contact}@c.us`, message)
            });
          }
          app.setAsDefaultProtocolClient('wmstatus');
        }
      }

    }
    app.on('ready', main);

    app.on('window-all-closed', () => {
      if (process.platform !== 'darwin') {
        app.quit();
      }
    });

    app.on('activate', async () => {
      // On OS X it's common to re-create a window in the app when the
      // dock icon is clicked and there are no other windows open.
      if (BrowserWindow.getAllWindows().length === 0) {
        await main();
      }
    });
  })
  .catch(err => console.error(err))
